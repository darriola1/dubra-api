generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/generated/zod/"
  useMultipleFiles = true
  createInputTypes = false
  writeBarrelFiles = false
}

model Customer {
  id              Int       @id @default(autoincrement())
  nombre_fantasia String    @unique(map: "Empresa_nombre_fantasia_key")
  razon_social    String    @unique(map: "Empresa_razon_social_key")
  RUT             String    @unique(map: "Empresa_RUT_key")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime
  users           User[]
  Invoice         Invoice[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique(map: "Usuario_email_key")
  name       String
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  customerId Int?
  customer   Customer? @relation(fields: [customerId], references: [id], map: "Usuario_empresaId_fkey")
  orders     Order[]

  @@index([customerId], map: "User_customerId_fkey")
}

model Order {
  id                    Int                     @id @default(autoincrement())
  description           String
  userId                Int
  user                  User                    @relation(fields: [userId], references: [id], map: "Order_usuarioId_fkey")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  shippings             Shipping[]
  ShippingStatusHistory ShippingStatusHistory[]

  @@index([userId], map: "Order_userId_fkey")
}

model Shipping {
  id           Int            @id @default(autoincrement())
  orderId      Int
  order        Order          @relation(fields: [orderId], references: [id])
  fromAddress  String
  toAddress    String
  contactName  String?
  contactPhone String?
  trackingId   String         @unique
  carrier      String
  status       ShippingStatus
  sequence     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model ShippingStatusHistory {
  id        Int            @id @default(autoincrement())
  orderId   Int
  order     Order          @relation(fields: [orderId], references: [id])
  status    ShippingStatus
  changedAt DateTime       @default(now())
}

enum ShippingStatus {
  pendiente
  en_camino
  entregado
  cancelado
}

model Invoice {
  id         Int      @id @default(autoincrement())
  number     String
  fileBase64 String
  createdAt  DateTime @default(now())

  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
}
